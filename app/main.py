"""
FastAPI Chat Application - Arquivo Principal
Vers√£o refatorada com c√≥digo modularizado e boas pr√°ticas.
"""
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.responses import FileResponse
from contextlib import asynccontextmanager

from .core.config import settings
from .database.connection import MongoDB
from .routes import messages, websocket


# Gerenciador de ciclo de vida da aplica√ß√£o
@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    Gerencia o ciclo de vida da aplica√ß√£o.
    Conecta ao MongoDB na inicializa√ß√£o e desconecta ao finalizar.
    """
    # Startup
    print("üöÄ Iniciando aplica√ß√£o...")
    settings.validate()
    await MongoDB.connect(settings.MONGO_URL, settings.MONGO_DB)
    
    yield  # Aplica√ß√£o rodando
    
    # Shutdown
    print("üõë Finalizando aplica√ß√£o...")
    await MongoDB.disconnect()


# Cria inst√¢ncia do FastAPI
app = FastAPI(
    title=settings.API_TITLE,
    version=settings.API_VERSION,
    description=settings.API_DESCRIPTION,
    lifespan=lifespan
)

# Configura√ß√£o de CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.CORS_ORIGINS,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Monta arquivos est√°ticos
app.mount("/static", StaticFiles(directory="app/static"), name="static")

# Inclui rotas
app.include_router(messages.router, prefix="/api/v1")
app.include_router(websocket.router)


# Rota principal - serve o cliente HTML
@app.get("/", include_in_schema=False)
async def serve_client():
    """Serve o cliente HTML do chat."""
    return FileResponse("app/static/index.html")


# Rota de health check
@app.get("/health", tags=["monitoring"])
async def health_check():
    """
    Verifica o status da aplica√ß√£o.
    √ötil para monitoramento e deploy.
    """
    try:
        # Tenta pingar o MongoDB
        db = MongoDB.get_database()
        await db.command("ping")
        mongo_status = "connected"
    except Exception as e:
        mongo_status = f"error: {str(e)}"
    
    return {
        "status": "healthy" if mongo_status == "connected" else "degraded",
        "version": settings.API_VERSION,
        "database": mongo_status
    }


# Informa√ß√µes da API
@app.get("/info", tags=["monitoring"])
async def api_info():
    """Retorna informa√ß√µes sobre a API."""
    from .websocket.manager import manager
    
    return {
        "title": settings.API_TITLE,
        "version": settings.API_VERSION,
        "active_rooms": manager.get_all_rooms(),
        "total_connections": sum(
            len(users) for users in manager.rooms.values()
        )
    }


if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        "app.main:app",
        host="0.0.0.0",
        port=8000,
        reload=True
    )